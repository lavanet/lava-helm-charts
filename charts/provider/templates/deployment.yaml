{{- $keySecretName := required ".Values.key.secretName is required." .Values.key.secretName -}}
{{- $keySecretKey := required ".Values.key.secretKey is required." .Values.key.secretKey -}}
{{- $keyPasswordSecretName := required ".Values.key.passwordSecretName is required." .Values.key.passwordSecretName -}}
{{- $keyPasswordSecretKey := required ".Values.key.passwordSecretKey is required." .Values.key.passwordSecretKey -}}
{{- $endpoint := required ".Values.endpoint is required." .Values.endpoint -}}
{{- $supportedChainIds := required ".Values.supportedChainIds is required." .Values.supportedChainIds -}}
{{- $rpcNodeUrl := required ".Values.rpcNodeUrl is required." .Values.rpcNodeUrl -}}
{{- $configFilePath := default "/provider_config.yaml" .Values.configFilePath  -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "provider.fullname"  . }}
  labels:
    lavanet.xyz/node_moniker:  {{ include "provider.moniker"  . }}
    lavanet.xyz/node_type: "provider"
    {{- include "provider.labels" . | nindent 4 }}
spec:
  {{- if .Values.persistentVolume.enabled }}
  replicas: 1
  strategy:
    type: Recreate
  {{- else }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: "25%"
      maxUnavailable: 5%
  {{- end }}
  selector:
    matchLabels:
      lavanet.xyz/node_moniker:  {{ include "provider.moniker"  . }}
      lavanet.xyz/node_type: "provider"
      {{- include "provider.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
       {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        lavanet.xyz/node_moniker:  {{ include "provider.moniker"  . }}
        lavanet.xyz/node_type: "provider"
        {{- include "provider.selectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      ## init container to import key into keyring
      initContainers:
        - name: init-import-key
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: 
           - sh
           - -c
           - | 
            # exit when any command fails
            set -e 

            # check if its already imported
            if [ -f {{ .Values.persistentVolume.mountPath }}/imported ]; then
              echo "Key has already been exported, exiting..."
              exit 0
            fi

            # import key into keyring
            echo $KEY_PASSWORD | lavad keys \
              import {{ include "provider.keyname" . }} /tmp/keyfile/{{ $keySecretKey }} \
              --keyring-backend "test" \
              --home {{ .Values.persistentVolume.mountPath }} \
              --keyring-dir {{ .Values.persistentVolume.mountPath }}

            # mark as imported
            touch {{ .Values.persistentVolume.mountPath }}/imported
          volumeMounts:
            - name: "private-key-volume"
              mountPath: /tmp/keyfile/{{ $keySecretKey }}
              subPath: {{ $keySecretKey }}
              readOnly: true
            - name: data-volume
              mountPath: {{ .Values.persistentVolume.mountPath }}
              subPath: "{{ .Values.persistentVolume.subPath }}"
          env:
            - name: KEY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $keyPasswordSecretName }}
                  key: {{ $keyPasswordSecretKey }}
      containers:
        - name: {{ include "provider.fullname"  . }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
          {{- if .Values.configYaml }}
            - name: config-volume-from-values
              mountPath: "{{ .Values.persistentVolume.mountPath }}/provider_config.yaml"
              subPath: provider_config.yaml
              readOnly: true
          {{- end }}
          {{- range .Values.extraSecretMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              subPath: {{ .subPath }}
              readOnly: {{ .readOnly }}
          {{- end }}
          {{- range .Values.extraConfigMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              subPath: {{ .subPath }}
              readOnly: {{ .readOnly }}
          {{- end }}
            - name: data-volume
              mountPath: {{ .Values.persistentVolume.mountPath }}
              subPath: "{{ .Values.persistentVolume.subPath }}"
          {{- with .Values.envFrom }}
          envFrom: 
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env: 
            - name: LOG_LEVEL
              value: {{ .Values.logLevel }}
          {{- with .Values.env }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - name: {{ .Values.port.name }}
              containerPort: {{ .Values.port.number }}
              protocol: {{ .Values.port.protocol }}
            {{ if .Values.metrics.enabled }}
            - name: metrics
              containerPort: {{ .Values.metrics.port }}
              protocol: TCP
            {{ end }}
          {{- if .Values.command }}
          {{- with .Values.command.name }}
          command: 
            - {{ . | quote }}
          {{- end }}
          {{- with .Values.command.args }}
          args:
            {{- toYaml . | nindent 12 -}}
          {{- end }}
          # default command
          {{- else }}
          {{- if .Values.lavavisor }}
          command: ["lavavisor"]
          args: [
            "pod",
            "--cmd",
            'lavap rpcprovider {{ $configFilePath }}
              --from {{ include "provider.keyname" . }}
              --home {{ .Values.persistentVolume.mountPath }}
              --keyring-backend test
              --keyring-dir {{ .Values.persistentVolume.mountPath }}
              --geolocation {{.Values.geolocation}}
              --node {{ $rpcNodeUrl }}
              --chain-id {{.Values.chainId}}',
            --directory,
            "{{ .Values.persistentVolume.mountPath }}",
            "--node", "{{ $rpcNodeUrl }}",
            "--chain-id", "{{ .Values.chainId }}",
            "--log_level", "{{ .Values.logLevel }}",
            {{- if .Values.metrics.enabled }}
            "--metrics-listen-address", "0.0.0.0:{{ .Values.metrics.port }}"
            {{- end }}
          ]
          {{- else }}
          command: ["lavap"]
          args: [
            "rpcprovider", "{{ $configFilePath }}",
            "--from", "{{- include "provider.keyname" . }}",
            "--home",  "{{ .Values.persistentVolume.mountPath }}",
            "--keyring-backend", "test",
            "--keyring-dir",  "{{ .Values.persistentVolume.mountPath }}",
            "--geolocation", "{{.Values.geolocation}}",
            "--node", "{{ $rpcNodeUrl }}",
            "--chain-id", "{{.Values.chainId}}",
            "--log_level", "{{ .Values.logLevel }}",
            {{- if .Values.metrics.enabled }}
            "--metrics-listen-address", "0.0.0.0:{{ .Values.metrics.port }}"
            {{- end }}
          ]
          {{- end }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{ if .Values.defaultLivenessProbe.enabled }}
          {{- $metricsPort := required ".Values.metrics.port is required." .Values.metrics.port -}}
          livenessProbe:
            httpGet:
              path: /metrics/overall-health
              port: {{ $metricsPort }}
            {{- toYaml (unset .Values.defaultLivenessProbe "enabled") | nindent 12 }}
          {{ else if .Values.customLivenessProbe.enabled }}
          livenessProbe:
            {{- toYaml (unset .Values.customLivenessProbe "enabled") | nindent 12 }}
          {{- end }}
          {{ if .Values.defaultReadinessProbe.enabled }}
          readinessProbe:
            exec:
              command: 
                - lavad
                - test
                - rpcprovider
                - "--home"
                - "{{ .Values.persistentVolume.mountPath }}"
                - "--keyring-backend"
                - "test"
                - "--keyring-dir"
                - "{{ .Values.persistentVolume.mountPath }}"
                - "--node"
                - "{{ $rpcNodeUrl }}"
                - --from
                - {{ include "provider.keyname" . | quote }}
                - --endpoints
                - "{{- range .Values.supportedChainIds -}}{{ $.Values.endpoint }}:443,{{ . }} {{ end }}"
            {{- toYaml (unset .Values.defaultReadinessProbe "enabled") | nindent 12 }}
          {{ else if .Values.customReadinessProbe.enabled }}
          readinessProbe:
            {{- toYaml (unset .Values.customReadinessProbe "enabled") | nindent 12 }}
          {{ end }}
        {{- if .Values.sidecars }}
        {{- toYaml .Values.sidecars | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: "private-key-volume"
          secret: 
            secretName: {{ $keySecretName }}
            optional: false
        {{- if .Values.configYaml }}
        - name: config-volume-from-values
          configMap:
            name: {{ include "provider.fullname" . }}-config-from-values
        {{- end }}
        {{- range .Values.extraSecretMounts }}
        - name: {{ .name }}
          secret:
            secretName: {{ .secretName }}
            {{- with .optional }}
            optional: {{ . }}
            {{- end }}
        {{- end }}
        {{- range .Values.extraConfigMounts }}
        - name: {{ .name }}
          secret:
            secretName: {{ .secretName }}
            {{- with .optional }}
            optional: {{ . }}
            {{- end }}
        {{- end }}
        - name: data-volume
        {{- if .Values.persistentVolume.enabled }}
          persistentVolumeClaim:
            claimName: {{ if .Values.persistentVolume.existingClaim }}{{ .Values.persistentVolume.existingClaim }}{{- else }} {{- include "provider.fullname"  . }}-data-volume-pvc {{- end }}
        {{- else }}
          emptyDir:
          {{- if .Values.emptyDir.sizeLimit }}
            sizeLimit: {{ .Values.emptyDir.sizeLimit }}
          {{- else }}
            {}
          {{- end -}}
        {{- end -}}
